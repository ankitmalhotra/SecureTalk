//
//  messengerViewController.m
//  socialNetwork-UTD
//
//  Created by Ankit Malhotra on 10/10/12.
//  Copyright (c) 2012 Ankit Malhotra. All rights reserved.
//

#import "messengerViewController.h"
#import "messengerAppDelegate.h"
#import <CoreLocation/CoreLocation.h>
#import "secureMessageRSA.h"
//#import <Security/Security.h>
//#import <CommonCrypto/CommonCrypto.h>
//#import <CommonCrypto/CommonDigest.h>



/*static variable declaration*/

/*Flag to ensure initial login view is displayed only once*/
static int appearCheck=0;
/*Flag to tell message posts are fetched and ready to be shown in text view*/
static int showPosts=0;
/*Mutable Array object to collate group names inbound from server*/
static NSMutableArray *groups;
/*Mutable Array object to collate friend names inbound from server*/
static NSMutableArray *friends;
/*Stores the userId (NOT user name)*/
static NSString *username;
/*Stores the userNumber (an Integer number unique for every user, generated by server)*/
static NSString *userNumber;
/*Stores the Access Token (a String unique for every user, generated by server)*/
static NSString *accessToken;
/*Stores the user's password*/
static NSString *userpwd;
/*Stores the entered password by user*/
static NSString *passwordForWipeData;
/*Stores the current entered password by user*/
static NSString *oldPassword;
/*Stores the current entered password by user*/
static NSString *oldPasswordForChangeEmail;
/*Stores the new entered password by user*/
static NSString *newPassword;
/*Stores the new password by user*/
static NSString *retypeNewPassword;
/*Stores the entered email address by user*/
static NSString *newEmailAddress;
/*Stores the re-entered email address by user*/
static NSString *retypeNewEmailAddress;
/*Stores the entered password by user*/
//static NSString *passwordForChangeEmail;
/*Stores the user's emailID*/
static NSString *userMailID=NULL;
/*Stores the selected group name from group table view*/
static NSString *groupName;
/*Stores the selected group name from group table view*/
static NSString *groupNumber;
/*Stores the selected friend name from friend table view*/
static NSString *friendname;
/*Stores the list of buddys of logged in user*/
static NSMutableArray *buddyLisyt;
/*Mutable Array object to collate message post data from server*/
static NSMutableArray *messagePostData;
/*String to show message data in text view*/
static NSMutableArray *messageDataToShow;
/*String to show username data in text view*/
static NSMutableArray *userNameDataToShow;
/*Mutable Array object to collate friend's user number from post data*/
static NSMutableArray *friendNumber;
/*Mutable Array object to collate friend's user name from post data*/
static NSMutableArray *friendName;
/*Mutable Array object to collate friend's user ID's from post data*/
static NSMutableArray *friendUserId;
/*Stores location latitude*/
static double locationLatitude;
/*Stores location latitude*/
static double locationLongitude;
/*Signal to tell if posts should be refreshed or not*/
static int refreshPosts=0;
/*Signal login view that user logn data has been successfully received or not*/
static int loginSuccessSignal=0;

/*This variable tells if user has no other members in his group, apart from him*/
int nullFriendsCheck=0;

/*Display & hiding wipe data view*/
int showWipeView=0;

/*Flag for change password or change email actions*/
int changePasswordFlag=0;
int changeEmailFlag=0;

/*Geo-location vars*/
static NSString *streetAddress;
static NSString *city;
static NSString *state;
static NSString *zip;


@interface messengerViewController ()
{
    /*Location constants*/
    CLLocationManager *locManager;
}

@end


@implementation messengerViewController


- (void)viewDidLoad
{
    NSLog(@"main view loaded with check: %d",appearCheck);
    
    /*Object instantiations*/
    groups=[[NSMutableArray alloc]init];
    friends=[[NSMutableArray alloc]init];
    messagePostData=[[NSMutableArray alloc]init];
    buddyLisyt=[[NSMutableArray alloc]init];
    
    restObj=[[messengerRESTclient alloc]init];
    groupViewObj=[[groupsTableViewViewController alloc]init];
    newPostObj=[[newPostViewController alloc]init];
    detailMsgViewObj=[[detailMessageViewController alloc]init];
    friendObj=[[friendsViewController alloc]init];

    mainViewTab.delegate=self;
    
    UIImageView *bg = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"texture08.jpg"]];
    [postsViewer setBackgroundView:bg];
    
    [super viewDidLoad];
    
    
    /*Start Location updater everytime view loads up*/
    [self initLocUpdate];
    
    /*Add a refresh controller to the table view*/
    refreshControl=[[UIRefreshControl alloc]init];
    [refreshControl addTarget:self action:@selector(refreshTableView) forControlEvents:UIControlEventValueChanged];
    [postsViewer addSubview:refreshControl];
    
    connProgress.hidden=TRUE;
    connProgress.transform=CGAffineTransformMakeScale(1.5, 1.5);
    
}


-(void)initLocUpdate
{
    /*Setup Location Manager & start updating location*/
    locManager=[[CLLocationManager alloc] init];
    locManager.delegate=self;
    locManager.desiredAccuracy=kCLLocationAccuracyBest;
    locManager.distanceFilter=0.0f;
    if([CLLocationManager locationServicesEnabled])
    {
        [locManager startUpdatingLocation];
    }
}

-(void)refreshTableView
{
    if(groupName!=NULL)
    {
        [self clearAllPosts];
        [postsViewer setUserInteractionEnabled:FALSE];
        friendsTab.enabled=FALSE;
        groupsTab.enabled=FALSE;
        postBtn.enabled=FALSE;
        [self showPostData:groupNumber];
    }
    double delayInSeconds = 3.5;
    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
        [postsViewer reloadData];
        [refreshControl endRefreshing];
        [postsViewer setUserInteractionEnabled:TRUE];
        friendsTab.enabled=TRUE;
        groupsTab.enabled=TRUE;
        postBtn.enabled=TRUE;
    });
    
    if([groupName isEqualToString:@""]||[groupName isEqualToString:@" "])
    {
        postBtn.enabled=FALSE;
    }
    else
    {
        postBtn.enabled=TRUE;
    }

    /*
    double delayInSeconds = 1.0;
    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
        [refreshControl endRefreshing];
    });
     */
}

-(void)viewDidAppear:(BOOL)animated
{
    /*load up login view*/
    NSLog(@"view appeard check: %d",appearCheck);
    postsViewer.dataSource=self;
    postsViewer.delegate=self;
    if(appearCheck==0)
    {
        appearCheck=1;
        loginViewController *loginVw=[[loginViewController alloc]initWithNibName:nil bundle:nil];
        [self presentViewController:loginVw animated:YES completion:NULL];
        [loginVw release];
    }
    else
    {
        appearCheck++;

        NSString *titleStr=[[NSString alloc]initWithString:username];
        titleStr=[titleStr stringByAppendingString:@", Hello!"];

        if(groupName!=NULL)
        {
            titleStr=groupName;
        }
        
        [navBar.topItem setTitle:titleStr];
        
        if(appearCheck==2)
        {
            /*Get the user's roster of buddies*/
            dispatch_async(dispatch_get_main_queue(), ^{
                [restObj userRoster:userNumber :username :accessToken :@"getRosterSubscribers"];
            });
            
            double delayInSeconds = 2.0;
            dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
            dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                NSLog(@"receiving roster list..");
                retVal=[restObj returnValue];
                
                if(retVal==1)
                {
                    NSLog(@"buddies recived are: %@",buddyLisyt);
                    if(!friendObj)
                    {
                        friendObj=[[friendsViewController alloc]init];
                    }
                    [friendObj receiveAllBuddies:buddyLisyt];
                }
                else if (retVal==-1)
                {
                    NSLog(@"buddies not received!");
                }
                else if (retVal==0)
                {
                    double delayInSeconds = 2.0;
                    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
                    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                        NSLog(@"receiving roster list..");
                        retVal=[restObj returnValue];
                        
                        if(retVal==1)
                        {
                            NSLog(@"buddies recived are: %@",buddyLisyt);
                            if(!friendObj)
                            {
                                friendObj=[[friendsViewController alloc]init];
                            }
                            [friendObj receiveAllBuddies:buddyLisyt];
                        }
                        else if (retVal==-1)
                        {
                            NSLog(@"buddies not received!");
                        }
                        else if (retVal==0)
                        {
                            /*Get the user's roster of buddies*/
                            dispatch_async(dispatch_get_main_queue(), ^{
                                [restObj userRoster:userNumber :username :accessToken :@"getRosterSubscribers"];
                            });
                            
                            double delayInSeconds = 2.0;
                            dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
                            dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                                NSLog(@"receiving roster list..");
                                retVal=[restObj returnValue];
                                
                                if(retVal==1)
                                {
                                    NSLog(@"buddies recived are: %@",buddyLisyt);
                                    if(!friendObj)
                                    {
                                        friendObj=[[friendsViewController alloc]init];
                                    }
                                    [friendObj receiveAllBuddies:buddyLisyt];
                                }
                                else if (retVal==-1)
                                {
                                    NSLog(@"buddies not received!");
                                }
                                else if (retVal==0)
                                {
                                    double delayInSeconds = 2.0;
                                    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
                                    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                                        NSLog(@"receiving roster list..");
                                        retVal=[restObj returnValue];
                                        
                                        if(retVal==1)
                                        {
                                            NSLog(@"buddies recived are: %@",buddyLisyt);
                                            if(!friendObj)
                                            {
                                                friendObj=[[friendsViewController alloc]init];
                                            }
                                            [friendObj receiveAllBuddies:buddyLisyt];
                                        }
                                        else if (retVal==-1)
                                        {
                                            NSLog(@"buddies not received!");
                                        }
                                        else if (retVal==0)
                                        {
                                            NSLog(@"buddies not received due to connection error");
                                        }
                                    });
                                }
                            });            
                        }
                    });
                }
            });            
        }
    }
    
    if(refreshPosts==1)
    {
        [postsViewer reloadData];
        connProgress.hidden=FALSE;
        [connProgress startAnimating];
        [postsViewer setUserInteractionEnabled:FALSE];
        friendsTab.enabled=FALSE;
        groupsTab.enabled=FALSE;
        postBtn.enabled=FALSE;
        
        /*Reload the table with newly generated posts*/
        if(groupName!=NULL)
        {
            [self clearAllPosts];
            [self showPostData:groupNumber];
        }
        if(appearCheck>1)
        {
            double delayInSeconds = 3.5;
            dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
            dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                [postsViewer reloadData];
                connProgress.hidden=TRUE;
                [connProgress stopAnimating];
                [postsViewer setUserInteractionEnabled:TRUE];
                friendsTab.enabled=TRUE;
                groupsTab.enabled=TRUE;
                postBtn.enabled=TRUE;
            });
        }
        refreshPosts=0;
    }
    else
    {
        NSLog(@"No new group selected. Ignoring refresh.");
    }
    
    /*If no group selected, keep post button disabled*/
    if(groupName!=NULL)
    {
        if([groupName isEqualToString:@""]||[groupName isEqualToString:@" "])
        {
            postBtn.enabled=FALSE;
        }
        else
        {
            postBtn.enabled=TRUE;
        }
    }
    else
    {
        postBtn.enabled=FALSE;
    }
}



/*To be called by friends Viewer class to return fetched roster items*/
-(void)fetchRosterForMe
{
    /*Get the user's roster of buddies*/
    dispatch_async(dispatch_get_main_queue(), ^{
        restObj=[[messengerRESTclient alloc]init];
        [restObj userRoster:userNumber :username :accessToken :@"getRosterSubscribers"];
    });
    
    double delayInSeconds = 2.0;
    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
        NSLog(@"receiving roster list..");
        retVal=[restObj returnValue];
        
        if(retVal==1)
        {
            NSLog(@"buddies recived are: %@",buddyLisyt);
            if(!friendObj)
            {
                friendObj=[[friendsViewController alloc]init];
            }
            [friendObj receiveAllBuddies:buddyLisyt];
        }
        else if (retVal==-1)
        {
            NSLog(@"buddies not received!");
        }
        else if (retVal==0)
        {
             NSLog(@"buddies not received due to connection error");
        }
    });
}


/*The signal telleing wether to refresh for new posts is set here by groups view controller*/
-(void)setPostsRefreshSignal
{
    refreshPosts=1;
}

/*Define group values to be shown in group tableview*/
-(NSMutableArray *)getGroupObjects :(NSMutableArray *)arrayInput :(int)toReturn
{
    /*If toReturn is 1: collate the data inbound into groups object*/
    if(toReturn==1)
    {
        [groups addObjectsFromArray:arrayInput];
        //NSLog(@"group data received: %@",groups);
        return NULL;
    }
    /*If toReturn is 0: return the collated data to show in table*/
    else
    {
        NSLog(@"showing group data: %@",groups);
        return groups;
    }
}

/*Define friend values to be shown in friend tableview*/
-(NSArray *)getFriendObjects :(NSMutableArray *)arrayInput :(int)toReturn
{
    /*If toReturn is 1: collate the data inbound into friends object*/
    if(toReturn==1)
    {
        [friends addObjectsFromArray:arrayInput];
        //NSLog(@"friend data received: %@",friends);
        return NULL;
    }
    /*If toReturn is 0: return the collated data to show in table*/
    else
    {
      
        NSLog(@"showing friend data: %@",friendUserId);
        return friendUserId;
    }
}


/*Receive the index selected in group tableview*/
-(void)setSelectedGroupNum:(NSString *)indexVal
{
    groupNumber=[indexVal retain];
    NSLog(@"group number of selected group: %@",groupNumber);
    if(![groupNumber isEqualToString:@"-1"])
    {
        newPostObj=[[newPostViewController alloc]init];
        [newPostObj getGroupNumber:groupNumber];
        postBtn.enabled=TRUE;
    }
    else
    {
        NSLog(@"invalid group number");
        postBtn.enabled=FALSE;
    }
}

-(void)setSelectedGroupName:(NSString *)indexVal
{
    groupName=[indexVal retain];
    NSLog(@"group name selected: %@",groupName);
}

/*Receive the index selected in friends tableview*/
-(void)setSelectedIndexFriends: (NSString *)indexVal
{
    friendname=[indexVal retain];
    NSLog(@"friend index selected: %@",friendname);
}

-(NSString *)signalGroupName
{
    NSLog(@"signaling group name: %@",groupName);
    return groupName;
}

/*Signal collated friends data*/
-(NSMutableArray *)signalFriends
{
    NSLog(@"friend sending: %@",friends);
    return friends;
}

-(void)storeUserDetails:(NSMutableArray *)userData
{
    NSLog(@"user details: %@",userData);
    
    if([userData count]>0)
    {
        /*First add user number as per xml response sequence, then add access-token. If anything else is included in xml response then put their cases respectively in order*/
        if(userNumber==NULL)
        {
            userNumber=[userData objectAtIndex:0];
            NSLog(@"user number received: %@",userNumber);
        }
        else if (accessToken==NULL)
        {
            accessToken=[userData objectAtIndex:0];
            NSLog(@"access token received: %@",accessToken);
        }
        
        /*If both are not null, then send these received parameters to the groups and chat view respectively*/
        if(userNumber!=NULL && accessToken !=NULL)
        {
            /*Set login success signal to 1*/
            loginSuccessSignal=1;
            
            /*Send user number to groups table view controller*/
            groupViewObj=[[groupsTableViewViewController alloc]init];
            [groupViewObj getUserNumber:userNumber];
            [groupViewObj getAccessToken:accessToken];
            
            newPostObj=[[newPostViewController alloc]init];
            [newPostObj getUserNumber:userNumber];
            [newPostObj getAccessToken:accessToken];
            
            userChatObj=[[userChatViewController alloc]init];
            [userChatObj getUserNumber:userNumber];
            [userChatObj getUserId:username];
        }
        else
        {
            NSLog(@"login data not fully received");
            loginSuccessSignal=0;
        }
    }
}

/*Return the current login status signal*/
-(int)tellLoginStatus
{
    NSLog(@"returning status:%d",loginSuccessSignal);
    return loginSuccessSignal;
}

-(void)showPostData:(NSString *)groupName
{
    [self clearAllPosts];

    restObj=[[messengerRESTclient alloc]init];
    dispatch_async(dispatch_get_main_queue(), ^{
        [restObj showPostData:userNumber:groupNumber:locationLatitude:locationLongitude:accessToken :@"getGroupMessages"];
    });
    
    double delayInSeconds = 3.0;
    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
        retVal=[restObj returnValue];
        if(retVal==1)
        {
            int k=0;
            messageDataToShow=NULL;
            userNameDataToShow=NULL;
            NSLog(@"messages data count: %d",[messagePostData count]);
            NSLog(@"number of messages: %u",[messagePostData count]/2);
            
            while(k<[messagePostData count] && [messagePostData count]!=1)
            {
                /*Remove the last index, in case of out-of-sequence input message post sequence*/
                if([messagePostData count]%2!=0)
                {
                    [messagePostData removeObjectAtIndex:[messagePostData count]-1];
                }
                
                k++;
                messageDataToShow=[messagePostData objectAtIndex:k];
                userNameDataToShow=[messagePostData objectAtIndex:k-1];
                k++;
                showPosts=1;
            }
        }
        else if(retVal==-1)
        {
            UIAlertView *msgListAlert=[[UIAlertView alloc]initWithTitle:@"Failed" message:[NSString stringWithFormat:@"Message list could not be retrieved. Please try again"] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [msgListAlert show];
            [msgListAlert release];
        }
        else if(retVal==0)
        {
            double delayInSeconds = 4.0;
            dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
            dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                retVal=[restObj returnValue];
                if(retVal==1)
                {
                    int k=0;
                    messageDataToShow=NULL;
                    userNameDataToShow=NULL;
                    NSLog(@"messages data count: %d",[messagePostData count]);
                    NSLog(@"number of messages: %u",[messagePostData count]/2);
                    
                    while(k<[messagePostData count] && [messagePostData count]!=1)
                    {
                        /*Remove the last index, in case of out-of-sequence input message post sequence*/
                        if([messagePostData count]%2!=0)
                        {
                            [messagePostData removeObjectAtIndex:[messagePostData count]-1];
                        }
                        
                        k++;
                        messageDataToShow=[messagePostData objectAtIndex:k];
                        userNameDataToShow=[messagePostData objectAtIndex:k-1];
                        k++;
                        showPosts=1;
                    }
                }
                else if(retVal==-1)
                {
                    UIAlertView *msgListAlert=[[UIAlertView alloc]initWithTitle:@"Failed" message:[NSString stringWithFormat:@"Message list could not be retrieved. Please try again"] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [msgListAlert show];
                    [msgListAlert release];
                }
                else if(retVal==0)
                {
                    NSLog(@"retval is: %d",retVal);
                    UIAlertView *connNullAlert=[[UIAlertView alloc]initWithTitle:@"Connection Error" message:@"Unable to contact server. Please try again." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                    [connNullAlert show];
                    [connNullAlert release];
                }
            });
        }
    });
}


-(void)collectedPostData:(NSMutableArray *)inputArray
{
    [messagePostData addObjectsFromArray:[inputArray retain]];
    [messagePostData retain];
}

-(void)collectedRosterSubscribers:(NSMutableArray *)inputArray
{
    [buddyLisyt addObjectsFromArray:[inputArray retain]];
    //NSLog(@"receiving buddy contents..%@",buddyLisyt);
}

/*Setting the username received from loginView*/
-(void)getUserId:(NSString *)userId :(NSString *)userPassword
{
    username=[userId retain];
    userpwd=[userPassword retain];
    
    /*Signal userId to groupsTableView(to be used for new group creation*/
    
    groupViewObj=[[groupsTableViewViewController alloc]init];
    [groupViewObj getUserData:username :userpwd :userMailID];
    
    /*Signal userId to newPostView(to be used for new post creation*/
    newPostObj=[[newPostViewController alloc]init];
    [newPostObj getUserId:username];
}

/*Setting the userEmailID received from signupview*/
-(void)getUserMailID:(NSString *)mailID
{
    userMailID=[mailID retain];
}



/*Location update function calls*/

-(void) locationManager:(CLLocationManager*)locManager
    didUpdateToLocation:(CLLocation*)newLocation
           fromLocation:(CLLocation*)oldLocation
{
    NSDate* eventDate = newLocation.timestamp;
    NSTimeInterval howRecent = [eventDate timeIntervalSinceNow];
    if (abs(howRecent) < 100000.0)
    {
        NSString *showPos=[NSString stringWithFormat:@"lat: %f,long: %f",newLocation.coordinate.latitude,newLocation.coordinate.longitude ];
        double latPos=newLocation.coordinate.latitude;
        double longPos=newLocation.coordinate.longitude;
        locationLatitude=latPos;
        locationLongitude=longPos;
        NSLog(@"Current user position: %@",showPos);
        
        /*Signal location co-ords to groupsTableView(to be used for new group creation)*/
        [groupViewObj getLocationCoords:latPos :longPos];
        
        /*Signal location co-ords to groupsTableView(to be used for posting messages to groups)*/
        newPostObj=[[newPostViewController alloc]init];
        [newPostObj getLocationCoords:latPos :longPos];
        
        /*
        typedef double CLLocationDistance;
        CLLocationDistance dist = [oldLocation distanceFromLocation:newLocation];
        NSLog(@"distance moved: %f meters",(dist));
        NSString *distmoved=[NSString stringWithFormat:@"You just moved: %f meters",(dist)];
        */
        
        /*Reverse Geo-coding*/
        NSOperationQueue *geoLocQueue=[NSOperationQueue new];
        SEL methodSelector=@selector(getGeoCoords::);
        NSMethodSignature *methodSignature=[self methodSignatureForSelector:methodSelector];
        NSInvocation *methodInvocation=[NSInvocation invocationWithMethodSignature:methodSignature];
        [methodInvocation setTarget:self];
        [methodInvocation setSelector:methodSelector];
        
        [methodInvocation setArgument:&latPos atIndex:2];
        [methodInvocation setArgument:&longPos atIndex:3];
        [methodInvocation retainArguments];
        
        NSInvocationOperation *invocationOperation=[[NSInvocationOperation alloc]initWithInvocation:methodInvocation];
        [geoLocQueue addOperation:invocationOperation];
        
        [invocationOperation release];
        [geoLocQueue release];
        
        /*Stop location updates*/
        [self stopUpdate];
    }
}



/*This method extracts reverse geocoding information from a given coordinate position on earth*/
-(void)getGeoCoords:(double)latitude :(double)longitude
{
    CLGeocoder *geoCoder=[[CLGeocoder alloc]init];
    CLLocation *currentLocation=[[CLLocation alloc]initWithLatitude:latitude longitude:longitude];
    
    [geoCoder reverseGeocodeLocation:currentLocation completionHandler:^(NSArray *placeMarks, NSError *err){
            if(err)
            {
                NSLog(@"Reverse geo-coding failed !");
                return;
            }
            if(placeMarks && placeMarks.count>0)
            {
                CLPlacemark *placeMarkers=placeMarks[0];
                NSDictionary *locationDictionary=placeMarkers.addressDictionary;
                
                streetAddress=[locationDictionary objectForKey:(NSString *)kABPersonAddressStreetKey];
                city=[locationDictionary objectForKey:(NSString *)kABPersonAddressCityKey];
                state=[locationDictionary objectForKey:(NSString *)kABPersonAddressStateKey];
                zip=[locationDictionary objectForKey:(NSString *)kABPersonAddressZIPKey];
                
                /*Detect for "En-Dash" unicode character & replace it
                 with a "-"
                 */
                //streetAddress=@"2520–2524 Rutford Ave, 2510–2514, Richardson, Texas";
                
                for(int k=0;k<[streetAddress length]-1;k++)
                {
                    const unichar escapeSeq=[streetAddress characterAtIndex:k];
                    
                    if(escapeSeq == L'\u2013')
                    {
                        NSLog(@"Unicode En-Dash character detected. Replacing it..");
                        NSString *beforeSeq=[[streetAddress substringToIndex:k]retain];
                        NSString *afterSeq=[[streetAddress substringFromIndex:k+1]retain];
                        streetAddress=beforeSeq;
                        streetAddress=[[streetAddress stringByAppendingString:@"-"]retain];
                        streetAddress= [[streetAddress stringByAppendingString:afterSeq]retain];
                        
                        [beforeSeq release];
                        [afterSeq release];
                    }
                }


                /*
                NSLog(@"logged in from:");
                NSLog(@"street: %@",streetAddress);
                NSLog(@"city: %@",city);
                NSLog(@"state: %@",state);
                NSLog(@"zip: %@",zip);
                */ 
            }
    }];
}

-(BOOL)shouldAutorotate
{
    return NO;
}

/*Clear the group list mutable array object(groups) when group tableview is dismissed*/
-(void)clearBufferList
{
    [groups removeAllObjects];
    [friends removeAllObjects];
}

/*Clear all the posts before reloading table view*/
-(void)clearAllPosts
{
    [messagePostData removeAllObjects];
}


/*load view for new post*/
-(void)createPost
{
    newPostViewController *newPostView=[[newPostViewController alloc]initWithNibName:nil bundle:nil];
    [self presentViewController:newPostView animated:YES completion:NULL];
    [newPostView release];
}

-(void)stopUpdate
{
    [locManager stopUpdatingLocation];
    NSLog(@"Location updater stoppped.");
}

-(void)invokeChatView:(NSString *)sender :(NSString *)messageData
{
    NSString *alertTitle=[[NSString alloc]initWithString:@"New message from "];
    alertTitle=[alertTitle stringByAppendingString:sender];
    
    newChatMessage=[[UIAlertView alloc]initWithTitle:alertTitle message:messageData delegate:self cancelButtonTitle:nil otherButtonTitles:@"Ok", nil];
    [newChatMessage show];
    [newChatMessage release];
}

#pragma mark - Table view data source
/*
 - (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
 {
    return [arr count];
 }
*/

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    NSLog(@"delegate called..");
    
    if(messagePostData==NULL)
    {
        return 0;
    }
    else
    {
        return [messagePostData count]/2;
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *CellIdentifier = @"PostsCell";
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil)
    {
        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier] autorelease];
    }
    
    /*Show selection of cell in gray color*/
    UIView *grayColorView = [[[UIView alloc] init] autorelease];
    grayColorView.backgroundColor = [UIColor lightGrayColor];
    cell.selectedBackgroundView = grayColorView;
    
    if (messageDataToShow!=NULL && userNameDataToShow!=NULL)
    {
        /*This block seperates out username and his post and assigns username to cell's detail text label & post to cell's text label*/
        int forUser=[indexPath row];
        if(forUser<[messagePostData count]/2)
        {
            forUser+=forUser;
            if([[messagePostData objectAtIndex:forUser+1] isEqualToString:@"61"])
            {
                cell.textLabel.text=@"";
            }
            else
            {
                cell.textLabel.text=[messagePostData objectAtIndex:forUser+1];
                cell.textLabel.font=[UIFont fontWithName:@"Marker Felt" size:18.0];
                cell.textLabel.textColor=[UIColor whiteColor];
            }

            /*Build the string to be displayed in cell's detail text label*/
            if([[messagePostData objectAtIndex:forUser] isEqualToString:@"false"])
            {
                cell.detailTextLabel.text=@"";
            }
            else
            {
                cellDetailTextLabel=[[NSString alloc]initWithString:@"says "];
                cellDetailTextLabel=[cellDetailTextLabel stringByAppendingString:[messagePostData objectAtIndex:forUser]];
                cellDetailTextLabel=[cellDetailTextLabel stringByAppendingString:@".."];
                cell.detailTextLabel.text=cellDetailTextLabel;
                cell.detailTextLabel.font=[UIFont fontWithName:@"Marker Felt" size:14.0];
                cell.detailTextLabel.textColor=[UIColor lightGrayColor];
            }
        }
        else
        {
            NSLog(@"rendering averted");
        }
        
    }
    return cell;
}


- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
	[tableView deselectRowAtIndexPath:indexPath animated:YES];
    UITableViewCell *selectedCell=[tableView cellForRowAtIndexPath:indexPath];
    
    selectedPost=selectedCell.textLabel.text;
    NSLog(@"you selected: %@",selectedPost);
    [detailMsgViewObj getPostMessageToDisplay:selectedPost];
    
    [self presentViewController:detailMsgViewObj animated:YES completion:nil];
}




#pragma mark - Tab-bar delegate

- (void)tabBar:(UITabBar *)tabBar didSelectItem:(UITabBarItem *)item;
{
    NSLog(@"tab bar delegate called");
    if(item==friendsTab)
    {
        /*Show Friends View Controller*/
        postBtn.enabled=FALSE;
        connProgress.hidden=FALSE;
        [connProgress startAnimating];
        friendsTab.enabled=FALSE;
        groupsTab.enabled=FALSE;
    
        
        if(groupNumber!=NULL)
        {
            NSLog(@"passing for user: %@, %@ and group; %@",username,userNumber,groupNumber);
            dispatch_async(dispatch_get_main_queue(), ^{
                [restObj getFriendList:userNumber :groupNumber :locationLatitude :locationLongitude :accessToken :@"getUsersInGroup" ];
            });

                double delayInSeconds = 2.3;
                dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
                dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                    retVal=[restObj returnValue];
                    if(retVal==1)
                    {
                        /*Bifurcate the friend names and their user numbers. User numbers would be used for chatting amongst each other*/
                        friendName=[[NSMutableArray alloc]init];
                        friendNumber=[[NSMutableArray alloc]init];
                        friendUserId=[[NSMutableArray alloc]init];
                        
                        /*Remove data of logged in user*/
                        if([friends containsObject:userNumber])
                        {
                            NSUInteger index=[friends indexOfObject:userNumber];
                            [friends removeObject:userNumber];
                            [friends removeObjectAtIndex:index];
                            [friends removeObjectAtIndex:index];
                            
                            if([friends count]==0)
                            {
                                nullFriendsCheck=1;
                            }
                            else
                            {
                                nullFriendsCheck=0;
                            }
                        }
                        
                        if([friends count]>0 && [friends count]%3==0)
                        {
                            for(int k=0;k<[friends count];k++)
                            {
                                [friendNumber addObject:[friends objectAtIndex:k]];
                                [friendName addObject:[friends objectAtIndex:k+1]];
                                [friendUserId addObject:[friends objectAtIndex:k+2]];
                                k+=2;
                            }
                            
                            for(int k=0;k<[buddyLisyt count];k++)
                            {
                                if([friendUserId containsObject:[buddyLisyt objectAtIndex:k]])
                                {
                                    [friendUserId removeObject:[buddyLisyt objectAtIndex:k]];
                                }
                            }
                            findFriendObj=[[findFriendViewController alloc]init];
                            [findFriendObj getFriendNumbers:friendNumber];
                            
                            postBtn.enabled=TRUE;
                            connProgress.hidden=TRUE;
                            friendsTab.enabled=TRUE;
                            groupsTab.enabled=TRUE;
                            [connProgress stopAnimating];
                            
                            friendsViewController *fTblView=[[friendsViewController alloc]initWithNibName:nil bundle:nil];
                            [self presentViewController:fTblView animated:YES completion:NULL];
                            [fTblView release];
                        }
                        else
                        {
                            postBtn.enabled=TRUE;
                            connProgress.hidden=TRUE;
                            friendsTab.enabled=TRUE;
                            groupsTab.enabled=TRUE;
                            [connProgress stopAnimating];
                            
                            friendsViewController *fTblView=[[friendsViewController alloc]initWithNibName:nil bundle:nil];
                            [self presentViewController:fTblView animated:YES completion:NULL];
                            [fTblView release];
                        }
                    }
                    else
                    {
                        postBtn.enabled=TRUE;
                        connProgress.hidden=TRUE;
                        friendsTab.enabled=TRUE;
                        groupsTab.enabled=TRUE;
                        [connProgress stopAnimating];
                        
                        UIAlertView *connErr=[[UIAlertView alloc]initWithTitle:@"Connection Error" message:@"Unable to contact server. Please try again." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                        [connErr show];
                        [connErr release];
                    }
                });
        }
        else
        {
            UIAlertView *tryAgainAlert=[[UIAlertView alloc]initWithTitle:@"Please select a Group" message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:@"OK", nil];
            [tryAgainAlert show];
            [tryAgainAlert release];
            
            connProgress.hidden=TRUE;
            friendsTab.enabled=TRUE;
            groupsTab.enabled=TRUE;
            [connProgress stopAnimating];
        }
    }
    else if (item==groupsTab)
    {
        /*Show Groups View Controller*/
        postBtn.enabled=FALSE;
        connProgress.hidden=FALSE;
        friendsTab.enabled=FALSE;
        groupsTab.enabled=FALSE;
        [connProgress startAnimating];
        
        dispatch_async(dispatch_get_main_queue(), ^{
            [restObj showMyGroups:userNumber:locationLatitude:locationLongitude:accessToken :@"listMemberGroups"];
        });
        double delayInSeconds = 2.0;
        dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
        dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
            retVal=[restObj returnValue];
            if(retVal==1)
            {
                postBtn.enabled=TRUE;
                connProgress.hidden=TRUE;
                friendsTab.enabled=TRUE;
                groupsTab.enabled=TRUE;
                [connProgress stopAnimating];
                
                groupsTableViewViewController *gTblView=[[groupsTableViewViewController alloc]initWithNibName:nil bundle:nil];
                [self presentViewController:gTblView animated:YES completion:NULL];
                [gTblView release];
            }
            else
            {
                double delayInSeconds = 4.0;
                dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
                dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                    retVal=[restObj returnValue];
                    if(retVal==1)
                    {
                        postBtn.enabled=TRUE;
                        connProgress.hidden=TRUE;
                        friendsTab.enabled=TRUE;
                        groupsTab.enabled=TRUE;
                        [connProgress stopAnimating];
                        
                        groupsTableViewViewController *gTblView=[[groupsTableViewViewController alloc]initWithNibName:nil bundle:nil];
                        [self presentViewController:gTblView animated:YES completion:NULL];
                        [gTblView release];
                    }
                    else
                    {
                        postBtn.enabled=TRUE;
                        connProgress.hidden=TRUE;
                        friendsTab.enabled=TRUE;
                        groupsTab.enabled=TRUE;
                        [connProgress stopAnimating];
                        
                        UIAlertView *connErr=[[UIAlertView alloc]initWithTitle:@"Connection Error" message:@"Unable to contact server. Please try again." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                        [connErr show];
                        [connErr release];
                    }
                });
            }
        });
    }
}



-(IBAction)settingsMenu
{
    if(showWipeView==0)
    {
        showWipeView=1;
        
        [postsViewer setUserInteractionEnabled:FALSE];
        postBtn.enabled=FALSE;
        friendsTab.enabled=FALSE;
        groupsTab.enabled=FALSE;
        
        wipeDataView=[[UIView alloc]initWithFrame:CGRectMake(1.0, 46.0, 144.0, 165.0)];
        [wipeDataView setAlpha:0.0];
        [self.view addSubview:wipeDataView];
        
        /*Add up frills to this view*/
        wipeDataView.layer.cornerRadius=12.0;
        [wipeDataView.layer setMasksToBounds:YES];
        wipeDataView.layer.backgroundColor=[[UIColor blackColor]colorWithAlphaComponent:0.9].CGColor;
        wipeDataView.layer.borderColor=[UIColor lightGrayColor].CGColor;
        wipeDataView.layer.borderWidth=1.0;
        
        [UIView animateWithDuration:0.4 animations:^{
            [wipeDataView setAlpha:0.9];
            [postsViewer setAlpha:0.75];
        }];
        
        /*Add the alertview label*/
        settingsLabel=[[UILabel alloc]initWithFrame: CGRectMake(wipeDataView.frame.origin.x+43, wipeDataView.frame.origin.y-38, 62.0, 21.0)];
        settingsLabel.text=@"Settings";
        settingsLabel.textColor=[UIColor whiteColor];
        settingsLabel.font=[UIFont fontWithName:@"Marker Felt" size:16.0];
        settingsLabel.backgroundColor=[UIColor clearColor];
        [wipeDataView addSubview:settingsLabel];
        
        /*Add the imageview for patch*/
        patchView=[[UIImageView alloc]initWithFrame: CGRectMake(wipeDataView.frame.origin.x, wipeDataView.frame.origin.y-24, 144.0, 12.0)];
        patchView.image=[UIImage imageNamed:@"settings_patch.png"];
        [wipeDataView addSubview:patchView];
        
        /*Add the change password button*/
        changePasswordBtn=[UIButton buttonWithType:UIButtonTypeCustom];
        changePasswordBtn.frame=CGRectMake(wipeDataView.frame.origin.x+13, wipeDataView.frame.origin.y-1, 110.0, 31.0);
        [changePasswordBtn addTarget:self action:@selector(changeUserPassword) forControlEvents:UIControlEventTouchUpInside];
        changePasswordBtn.titleLabel.font=[UIFont fontWithName:@"Marker Felt" size:13.0];
        [changePasswordBtn setTitleColor:[UIColor colorWithRed:0.447 green:0.62 blue:0.91 alpha:1.0] forState:UIControlStateNormal];
        [changePasswordBtn setTitle:@"Change Password" forState:UIControlStateNormal];
        [wipeDataView addSubview:changePasswordBtn];

        /*Add the change password button*/
        changeEmailBtn=[UIButton buttonWithType:UIButtonTypeCustom];
        changeEmailBtn.frame=CGRectMake(wipeDataView.frame.origin.x+13, wipeDataView.frame.origin.y+33, 110.0, 31.0);
        [changeEmailBtn addTarget:self action:@selector(changeUserEmailAddress) forControlEvents:UIControlEventTouchUpInside];
        changeEmailBtn.titleLabel.font=[UIFont fontWithName:@"Marker Felt" size:13.0];
        [changeEmailBtn setTitleColor:[UIColor colorWithRed:0.447 green:0.62 blue:0.91 alpha:1.0] forState:UIControlStateNormal];
        [changeEmailBtn setTitle:@"Change Email" forState:UIControlStateNormal];
        [wipeDataView addSubview:changeEmailBtn];
        
        /*Add the delete all button*/
        deleteAllBtn=[UIButton buttonWithType:UIButtonTypeCustom];
        deleteAllBtn.frame=CGRectMake(wipeDataView.frame.origin.x+31, wipeDataView.frame.origin.y+85, 75.0, 18.0);
        [deleteAllBtn addTarget:self action:@selector(wipeAllUserData) forControlEvents:UIControlEventTouchUpInside];
        deleteAllBtn.titleLabel.font=[UIFont fontWithName:@"Marker Felt" size:14.0];
        [deleteAllBtn setTitleColor:[UIColor redColor] forState:UIControlStateNormal];
        [deleteAllBtn setTitle:@"Erase me !" forState:UIControlStateNormal];
        [wipeDataView addSubview:deleteAllBtn];
    }
    else if (showWipeView==1)
    {
        showWipeView=0;
        
        [postsViewer setUserInteractionEnabled:TRUE];
        if(groupNumber!=NULL)
        {
            postBtn.enabled=TRUE;
        }
        friendsTab.enabled=TRUE;
        groupsTab.enabled=TRUE;
                
        [UIView animateWithDuration:0.4 animations:^{
            [wipeDataView setAlpha:0.0];
            [postsViewer setAlpha:1.0];
        }];
    }
}


-(void)changeUserPassword
{
    changePasswordFlag=1;
    changeEmailFlag=0;
    changePasswordConfirmAlert=[[UIAlertView alloc]initWithTitle:@"Login Password" message:@"Please enter your login password to proceed" delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"Proceed", nil];
    changePasswordConfirmAlert.alertViewStyle=UIAlertViewStyleSecureTextInput;
    [changePasswordConfirmAlert textFieldAtIndex:0].delegate=self;
    [changePasswordConfirmAlert textFieldAtIndex:0].placeholder=@"Password";
    [changePasswordConfirmAlert show];
    [changePasswordConfirmAlert release];
}

-(void)changeUserEmailAddress
{
    changeEmailFlag=1;
    changePasswordFlag=0;
    changeEmailConfirmAlert=[[UIAlertView alloc]initWithTitle:@"Login Password" message:@"Please enter your login password to proceed" delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"Proceed", nil];
    changeEmailConfirmAlert.alertViewStyle=UIAlertViewStyleSecureTextInput;
    [changeEmailConfirmAlert textFieldAtIndex:0].delegate=self;
    [changeEmailConfirmAlert textFieldAtIndex:0].placeholder=@"Password";
    [changeEmailConfirmAlert show];
    [changeEmailConfirmAlert release];
}

-(void)wipeAllUserData
{
    UIAlertView *wipeAlert=[[UIAlertView alloc]initWithTitle:@"Erase your profile ?" message:@"Are you sure about erasing your profile ? This will delete all your data posted." delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"Proceed", nil];
    [wipeAlert show];
    [wipeAlert release];
}



#pragma mark alertview delegate

- (void)alertView:(UIAlertView *)alertViewOld didDismissWithButtonIndex:(NSInteger)buttonIndex
{
    if(buttonIndex==1)
    {
        if([alertViewOld.title isEqualToString:@"Erase your profile ?"])
        {
            credentialAlert=[[UIAlertView alloc]initWithTitle:@"Erase profile-Login Password" message:@"Please enter your login password" delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"Ok", nil];
            
            credentialAlert.alertViewStyle=UIAlertViewStyleSecureTextInput;
            [credentialAlert textFieldAtIndex:0].delegate=self;
            [credentialAlert show];
        }
        else if([alertViewOld.title isEqualToString:@"Erase profile-Login Password"])
        {            
            passwordForWipeData=[[NSString alloc]init];
            
            passwordForWipeData=[[credentialAlert textFieldAtIndex:0].text retain];
            
            if(passwordForWipeData==NULL || [passwordForWipeData isEqualToString:@""])
            {
                UIAlertView *nullLoginPwdAlert=[[UIAlertView alloc]initWithTitle:@"Empty Password !" message:@"Your Login Password cannot be empty. Please try again." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [nullLoginPwdAlert show];
                [nullLoginPwdAlert release];
            }
            else
            {
                [postsViewer setUserInteractionEnabled:FALSE];
                postBtn.enabled=FALSE;
                friendsTab.enabled=FALSE;
                groupsTab.enabled=FALSE;
                connProgress.hidden=FALSE;
                [connProgress startAnimating];
                wipeDataView.hidden=TRUE;
                
                dispatch_async(dispatch_get_main_queue(), ^{
                    [restObj wipeData:userNumber :passwordForWipeData :accessToken :@"wipeData"];
                });
                double delayInSeconds = 3.0;
                dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
                dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                    NSLog(@"receiving status of wipe data");
                    retVal=[restObj returnValue];
                    if(retVal==1)
                    {
                        NSLog(@"user data permanently erased !");
                        UIAlertView *erasedAlert=[[UIAlertView alloc]initWithTitle:@"Erased" message:@"Your profile has been erased successfully" delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                        [erasedAlert show];
                        [erasedAlert release];
                        
                        /*Set all user/group variables to NULL*/
                        [self resetAllVariables];
                        
                        [postsViewer setUserInteractionEnabled:TRUE];
                        if(groupNumber!=NULL)
                        {
                            postBtn.enabled=TRUE;
                        }
                        friendsTab.enabled=TRUE;
                        groupsTab.enabled=TRUE;
                        connProgress.hidden=TRUE;
                        [connProgress stopAnimating];
                        wipeDataView.hidden=FALSE;
                        
                        loginViewObj=[[loginViewController alloc]init];
                        [self presentViewController:loginViewObj animated:YES completion:NULL];
                    }
                    else if (retVal==-1)
                    {
                        NSLog(@"Incorrect password !");
                        UIAlertView *erasedAlert=[[UIAlertView alloc]initWithTitle:@"Password incorrect" message:@"Please enter your login password correctly" delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                        [erasedAlert show];
                        [erasedAlert release];
                        
                        [postsViewer setUserInteractionEnabled:TRUE];
                        if(groupNumber!=NULL)
                        {
                            postBtn.enabled=TRUE;
                        }
                        friendsTab.enabled=TRUE;
                        groupsTab.enabled=TRUE;
                        connProgress.hidden=TRUE;
                        [connProgress stopAnimating];
                        wipeDataView.hidden=FALSE;
                    }
                    else if (retVal==0)
                    {
                        double delayInSeconds = 3.0;
                        dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
                        dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                            NSLog(@"receiving status of wipe data");
                            retVal=[restObj returnValue];
                            if(retVal==1)
                            {
                                NSLog(@"user data permanently erased !");
                                UIAlertView *erasedAlert=[[UIAlertView alloc]initWithTitle:@"Erased" message:@"Your profile has been erased successfully" delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                                [erasedAlert show];
                                [erasedAlert release];
                                
                                /*Set all user/group variables to NULL*/
                                [self resetAllVariables];
                                
                                [postsViewer setUserInteractionEnabled:TRUE];
                                if(groupNumber!=NULL)
                                {
                                    postBtn.enabled=TRUE;
                                }
                                friendsTab.enabled=TRUE;
                                groupsTab.enabled=TRUE;
                                connProgress.hidden=TRUE;
                                [connProgress stopAnimating];
                                wipeDataView.hidden=FALSE;
                                
                                loginViewObj=[[loginViewController alloc]init];
                                [self presentViewController:loginViewObj animated:YES completion:NULL];
                            }
                            else if (retVal==-1)
                            {
                                NSLog(@"Incorrect password !");
                                UIAlertView *erasedAlert=[[UIAlertView alloc]initWithTitle:@"Password incorrect" message:@"Please enter your login password correctly" delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                                [erasedAlert show];
                                [erasedAlert release];
                                
                                [postsViewer setUserInteractionEnabled:TRUE];
                                if(groupNumber!=NULL)
                                {
                                    postBtn.enabled=TRUE;
                                }
                                friendsTab.enabled=TRUE;
                                groupsTab.enabled=TRUE;
                                connProgress.hidden=TRUE;
                                [connProgress stopAnimating];
                                wipeDataView.hidden=FALSE;
                            }
                            else if (retVal==0)
                            {
                                UIAlertView *connErrAlert=[[UIAlertView alloc]initWithTitle:@"Connection Error" message:@"Unable to contact server. Please try again." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                                [connErrAlert show];
                                [connErrAlert release];
                                
                                [postsViewer setUserInteractionEnabled:TRUE];
                                if(groupNumber!=NULL)
                                {
                                    postBtn.enabled=TRUE;
                                }
                                friendsTab.enabled=TRUE;
                                groupsTab.enabled=TRUE;
                                connProgress.hidden=TRUE;
                                [connProgress stopAnimating];
                                wipeDataView.hidden=FALSE;
                            }
                            
                        });
                    }
                });
                
                
                [UIView animateWithDuration:0.4 animations:^{
                    [wipeDataView setAlpha:0.0];
                    [postsViewer setAlpha:1.0];
                }];
            }
        }
        else if([alertViewOld.title hasPrefix:@"New message from "])
        {
            NSLog(@"navigation stack init");
            
            userChatObj=[[userChatViewController alloc]init];
            [self addChildViewController:userChatObj];
            [self presentViewController:userChatObj animated:YES completion:nil];
            NSLog(@"navigation stack ended");
        }
        else if([alertViewOld.title isEqualToString:@"Login Password"])
        {
            if(changePasswordFlag==1 && changeEmailFlag==0)
            {
                oldPassword=[[NSString alloc]init];
                
                oldPassword=[[changePasswordConfirmAlert textFieldAtIndex:0].text retain];
                NSLog(@"old pwd: %@",oldPassword);
                
                if(oldPassword==NULL || [oldPassword isEqualToString:@""])
                {
                    UIAlertView *nullLoginPwdAlert=[[UIAlertView alloc]initWithTitle:@"Empty Password !" message:@"Your Login Password cannot be empty. Please try again." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [nullLoginPwdAlert show];
                    [nullLoginPwdAlert release];
                }
                else
                {
                    if([oldPassword isEqualToString:userpwd])
                    {
                        changePasswordAlert=[[UIAlertView alloc]initWithTitle:@"Change Password" message:nil delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"Confirm", nil];
                        changePasswordAlert.alertViewStyle=UIAlertViewStyleLoginAndPasswordInput;
                        [changePasswordAlert textFieldAtIndex:0].delegate=self;
                        [changePasswordAlert textFieldAtIndex:1].delegate=self;
                        [changePasswordAlert textFieldAtIndex:0].secureTextEntry=YES;
                        [changePasswordAlert textFieldAtIndex:0].placeholder=@"New Password";
                        [changePasswordAlert textFieldAtIndex:1].placeholder=@"Re-type New Password";
                        
                        [changePasswordAlert show];
                        [changePasswordAlert release];
                    }
                    else
                    {
                        UIAlertView *incorrectPasswordAlert=[[UIAlertView alloc]initWithTitle:@"Incorrect Password" message:@"The entered password does not match our records. Please try again." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                        [incorrectPasswordAlert show];
                        [incorrectPasswordAlert release];
                    }
                }
            }
            else if (changeEmailFlag==1 && changePasswordFlag==0)
            {
                oldPasswordForChangeEmail=[[NSString alloc]init];
                
                oldPasswordForChangeEmail=[[changeEmailConfirmAlert textFieldAtIndex:0].text retain];
                NSLog(@"old pwd entered at change email: %@",oldPasswordForChangeEmail);
                NSLog(@"actual login pwd: %@",userpwd);
                
                
                if(oldPasswordForChangeEmail==NULL || [oldPasswordForChangeEmail isEqualToString:@""])
                {
                    UIAlertView *nullLoginPwdAlert=[[UIAlertView alloc]initWithTitle:@"Empty Password !" message:@"Your Login Password cannot be empty. Please try again." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [nullLoginPwdAlert show];
                    [nullLoginPwdAlert release];
                }
                else
                {
                    if([oldPasswordForChangeEmail isEqualToString:userpwd])
                    {
                        changeEmailAlert=[[UIAlertView alloc]initWithTitle:@"Change Email Address" message:nil delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"Confirm", nil];
                        changeEmailAlert.alertViewStyle=UIAlertViewStyleLoginAndPasswordInput;
                        [changeEmailAlert textFieldAtIndex:0].delegate=self;
                        [changeEmailAlert textFieldAtIndex:1].delegate=self;
                        [changeEmailAlert textFieldAtIndex:1].secureTextEntry=FALSE;
                        [changeEmailAlert textFieldAtIndex:0].placeholder=@"New Email Address";
                        [changeEmailAlert textFieldAtIndex:1].placeholder=@"Re-type New Email Address";
                        [changeEmailAlert textFieldAtIndex:0].keyboardType=UIKeyboardTypeEmailAddress;
                        [changeEmailAlert textFieldAtIndex:1].keyboardType=UIKeyboardTypeEmailAddress;
                        
                        [changeEmailAlert show];
                        [changeEmailAlert release];
                    }
                    else
                    {
                        UIAlertView *incorrectPasswordAlert=[[UIAlertView alloc]initWithTitle:@"Incorrect Password" message:@"The entered password does not match our records. Please try again." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                        [incorrectPasswordAlert show];
                        [incorrectPasswordAlert release];
                    }
                }
            }
        }
       
        else if ([alertViewOld.title isEqualToString:@"Change Password"])
        {
            newPassword=[[NSString alloc]init];
            retypeNewPassword=[[NSString alloc]init];
            
            newPassword=[[changePasswordAlert textFieldAtIndex:0].text retain];
            retypeNewPassword=[[changePasswordAlert textFieldAtIndex:1].text retain];
            
            NSLog(@"new pwd: %@",newPassword);
            NSLog(@"retype new pwd: %@",retypeNewPassword);

            if([newPassword isEqualToString:@""]||newPassword==NULL)
            {
                UIAlertView *emptyNewPasswordAlert=[[UIAlertView alloc]initWithTitle:@"Empty Password" message:@"Your new password cannot be empty" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [emptyNewPasswordAlert show];
                [emptyNewPasswordAlert release];
            }
            else
            {
                if([retypeNewPassword isEqualToString:@""]||retypeNewPassword==NULL)
                {
                    UIAlertView *emptyNewPasswordAlert=[[UIAlertView alloc]initWithTitle:@"Empty Password" message:@"Your new password cannot be empty" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [emptyNewPasswordAlert show];
                    [emptyNewPasswordAlert release];
                }
                else
                {
                    if(![newPassword isEqualToString:retypeNewPassword])
                    {
                        UIAlertView *emptyNewPasswordAlert=[[UIAlertView alloc]initWithTitle:@"Password Mismatch !" message:@"Please re-enter your new password correctly." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                        [emptyNewPasswordAlert show];
                        [emptyNewPasswordAlert release];
                    }
                    else
                    {
                        showWipeView=0;
                        [postsViewer setUserInteractionEnabled:FALSE];
                        postBtn.enabled=FALSE;
                        friendsTab.enabled=FALSE;
                        groupsTab.enabled=FALSE;
                        connProgress.hidden=FALSE;
                        [connProgress startAnimating];
                        wipeDataView.hidden=TRUE;
                        
                        dispatch_async(dispatch_get_main_queue(), ^{
                            [restObj changeUserPassword: userNumber :oldPassword :newPassword :accessToken :@"changeUserInfo"];
                        });
                        double delayInSeconds = 2.0;
                        dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
                        dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                            NSLog(@"receiving status of change password");
                            retVal=[restObj returnValue];
                            if(retVal==1)
                            {
                                NSLog(@"user password successfully changed !");
                                UIAlertView *changePasswordSuccessAlert=[[UIAlertView alloc]initWithTitle:@"Password changed" message:@"Your login password has been changed successfully" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                                [changePasswordSuccessAlert show];
                                [changePasswordSuccessAlert release];
                                
                                [postsViewer setUserInteractionEnabled:TRUE];
                                if(groupNumber!=NULL)
                                {
                                    postBtn.enabled=TRUE;
                                }
                                friendsTab.enabled=TRUE;
                                groupsTab.enabled=TRUE;
                                connProgress.hidden=TRUE;
                                [connProgress stopAnimating];
                                wipeDataView.hidden=FALSE;
                            }
                            else if (retVal==-1)
                            {
                                NSLog(@"old password incorrect password !");
                                UIAlertView *changePasswordFailAlert=[[UIAlertView alloc]initWithTitle:@"Password incorrect" message:@"Please enter your current login password correctly" delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                                [changePasswordFailAlert show];
                                [changePasswordFailAlert release];
                                
                                [postsViewer setUserInteractionEnabled:TRUE];
                                if(groupNumber!=NULL)
                                {
                                    postBtn.enabled=TRUE;
                                }
                                friendsTab.enabled=TRUE;
                                groupsTab.enabled=TRUE;
                                connProgress.hidden=TRUE;
                                [connProgress stopAnimating];
                                wipeDataView.hidden=FALSE;
                            }
                            else if (retVal==0)
                            {
                                double delayInSeconds = 4.0;
                                dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
                                dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                                    NSLog(@"receiving status of change password");
                                    retVal=[restObj returnValue];
                                    if(retVal==1)
                                    {
                                        NSLog(@"user password successfully changed !");
                                        UIAlertView *changePasswordSuccessAlert=[[UIAlertView alloc]initWithTitle:@"Password changed" message:@"Your login password has been changed successfully" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                                        [changePasswordSuccessAlert show];
                                        [changePasswordSuccessAlert release];
                                        
                                        [postsViewer setUserInteractionEnabled:TRUE];
                                        if(groupNumber!=NULL)
                                        {
                                            postBtn.enabled=TRUE;
                                        }
                                        friendsTab.enabled=TRUE;
                                        groupsTab.enabled=TRUE;
                                        connProgress.hidden=TRUE;
                                        [connProgress stopAnimating];
                                        wipeDataView.hidden=FALSE;
                                    }
                                    else if (retVal==-1)
                                    {
                                        NSLog(@"old password incorrect password !");
                                        UIAlertView *changePasswordFailAlert=[[UIAlertView alloc]initWithTitle:@"Password incorrect" message:@"Please enter your current login password correctly" delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                                        [changePasswordFailAlert show];
                                        [changePasswordFailAlert release];
                                        
                                        [postsViewer setUserInteractionEnabled:TRUE];
                                        if(groupNumber!=NULL)
                                        {
                                            postBtn.enabled=TRUE;
                                        }
                                        friendsTab.enabled=TRUE;
                                        groupsTab.enabled=TRUE;
                                        connProgress.hidden=TRUE;
                                        [connProgress stopAnimating];
                                        wipeDataView.hidden=FALSE;
                                    }
                                    else if (retVal==0)
                                    {
                                        UIAlertView *connErrAlert=[[UIAlertView alloc]initWithTitle:@"Connection Error" message:@"Unable to contact server. Please try again." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                                        [connErrAlert show];
                                        [connErrAlert release];
                                        
                                        [postsViewer setUserInteractionEnabled:TRUE];
                                        if(groupNumber!=NULL)
                                        {
                                            postBtn.enabled=TRUE;
                                        }
                                        friendsTab.enabled=TRUE;
                                        groupsTab.enabled=TRUE;
                                        connProgress.hidden=TRUE;
                                        [connProgress stopAnimating];
                                        wipeDataView.hidden=FALSE;
                                    }
                                    
                                });
                            }
                            
                        });
                        
                        [UIView animateWithDuration:0.4 animations:^{
                            [wipeDataView setAlpha:0.0];
                            [postsViewer setAlpha:1.0];
                        }];
                    }
                }
            }
        }
        else if([alertViewOld.title isEqualToString:@"Change Email Address"])
        {            
            newEmailAddress=[[NSString alloc]init];
            retypeNewEmailAddress=[[NSString alloc]init];
            
            newEmailAddress=[[changeEmailAlert textFieldAtIndex:0].text retain];
            retypeNewEmailAddress=[[changeEmailAlert textFieldAtIndex:1].text retain];
            NSLog(@"new email address: %@",newEmailAddress);
            NSLog(@"retype new email address: %@",retypeNewEmailAddress);
            
            if([newEmailAddress isEqualToString:@""]||newEmailAddress==NULL)
            {
                UIAlertView *emptyNewEmailAddressAlert=[[UIAlertView alloc]initWithTitle:@"Empty Email Address" message:@"Your new email address cannot be empty" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [emptyNewEmailAddressAlert show];
                [emptyNewEmailAddressAlert release];
            }
            else
            {
                if([retypeNewEmailAddress isEqualToString:@""]||retypeNewEmailAddress==NULL)
                {
                    UIAlertView *emptyNewEmailAddressAlert=[[UIAlertView alloc]initWithTitle:@"Empty Email address" message:@"Your new email address cannot be empty" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [emptyNewEmailAddressAlert show];
                    [emptyNewEmailAddressAlert release];
                }
                else
                {
                    if(![newEmailAddress isEqualToString:retypeNewEmailAddress])
                    {
                        UIAlertView *incorrectNewEmailAddressAlert=[[UIAlertView alloc]initWithTitle:@"Email Address Mismatch !" message:@"Please re-enter your new email address correctly." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                        [incorrectNewEmailAddressAlert show];
                        [incorrectNewEmailAddressAlert release];
                    }
                    else
                    {
                        showWipeView=0;
                        [postsViewer setUserInteractionEnabled:FALSE];
                        postBtn.enabled=FALSE;
                        friendsTab.enabled=FALSE;
                        groupsTab.enabled=FALSE;
                        connProgress.hidden=FALSE;
                        [connProgress startAnimating];
                        wipeDataView.hidden=TRUE;
                        
                        dispatch_async(dispatch_get_main_queue(), ^{
                            [restObj changeUserEmailAddress: userNumber :oldPasswordForChangeEmail :newEmailAddress :accessToken :@"changeUserInfo"];
                        });
                        double delayInSeconds = 2.0;
                        dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
                        dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                            NSLog(@"receiving status of change email address");
                            retVal=[restObj returnValue];
                            if(retVal==1)
                            {
                                NSLog(@"user email address successfully changed !");
                                UIAlertView *changeEmailSuccessAlert=[[UIAlertView alloc]initWithTitle:@"Email Address changed" message:@"Your Email address has been changed successfully" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                                [changeEmailSuccessAlert show];
                                [changeEmailSuccessAlert release];
                                
                                [postsViewer setUserInteractionEnabled:TRUE];
                                if(groupNumber!=NULL)
                                {
                                    postBtn.enabled=TRUE;
                                }
                                friendsTab.enabled=TRUE;
                                groupsTab.enabled=TRUE;
                                connProgress.hidden=TRUE;
                                [connProgress stopAnimating];
                                wipeDataView.hidden=FALSE;
                            }
                            else if (retVal==-1)
                            {
                                NSLog(@"password incorrect !");
                                UIAlertView *changeEmailFailAlert=[[UIAlertView alloc]initWithTitle:@"Password incorrect" message:@"Please enter your current login password correctly" delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                                [changeEmailFailAlert show];
                                [changeEmailFailAlert release];
                                
                                [postsViewer setUserInteractionEnabled:TRUE];
                                if(groupNumber!=NULL)
                                {
                                    postBtn.enabled=TRUE;
                                }
                                friendsTab.enabled=TRUE;
                                groupsTab.enabled=TRUE;
                                connProgress.hidden=TRUE;
                                [connProgress stopAnimating];
                                wipeDataView.hidden=FALSE;
                            }
                            else if (retVal==0)
                            {
                                double delayInSeconds = 4.0;
                                dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
                                dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                                    NSLog(@"receiving status of change email address");
                                    retVal=[restObj returnValue];
                                    if(retVal==1)
                                    {
                                        NSLog(@"user email address successfully changed !");
                                        UIAlertView *changeEmailSuccessAlert=[[UIAlertView alloc]initWithTitle:@"Email Address changed" message:@"Your Email address has been changed successfully" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                                        [changeEmailSuccessAlert show];
                                        [changeEmailSuccessAlert release];
                                        
                                        [postsViewer setUserInteractionEnabled:TRUE];
                                        if(groupNumber!=NULL)
                                        {
                                            postBtn.enabled=TRUE;
                                        }
                                        friendsTab.enabled=TRUE;
                                        groupsTab.enabled=TRUE;
                                        connProgress.hidden=TRUE;
                                        [connProgress stopAnimating];
                                        wipeDataView.hidden=FALSE;
                                    }
                                    else if (retVal==-1)
                                    {
                                        NSLog(@"password incorrect !");
                                        UIAlertView *changeEmailFailAlert=[[UIAlertView alloc]initWithTitle:@"Password incorrect" message:@"Please enter your current login password correctly" delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                                        [changeEmailFailAlert show];
                                        [changeEmailFailAlert release];
                                        
                                        [postsViewer setUserInteractionEnabled:TRUE];
                                        if(groupNumber!=NULL)
                                        {
                                            postBtn.enabled=TRUE;
                                        }
                                        friendsTab.enabled=TRUE;
                                        groupsTab.enabled=TRUE;
                                        connProgress.hidden=TRUE;
                                        [connProgress stopAnimating];
                                        wipeDataView.hidden=FALSE;
                                    }
                                    else if (retVal==0)
                                    {
                                        UIAlertView *connErrAlert=[[UIAlertView alloc]initWithTitle:@"Connection Error" message:@"Unable to contact server. Please try again." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                                        [connErrAlert show];
                                        [connErrAlert release];
                                        
                                        [postsViewer setUserInteractionEnabled:TRUE];
                                        if(groupNumber!=NULL)
                                        {
                                            postBtn.enabled=TRUE;
                                        }
                                        friendsTab.enabled=TRUE;
                                        groupsTab.enabled=TRUE;
                                        connProgress.hidden=TRUE;
                                        [connProgress stopAnimating];
                                        wipeDataView.hidden=FALSE;
                                    }
                                    
                                });
                            }
                            
                        });
                        
                        [UIView animateWithDuration:0.4 animations:^{
                            [wipeDataView setAlpha:0.0];
                            [postsViewer setAlpha:1.0];
                        }];
                    }
                }
            }
        }
    }
    else if (buttonIndex==0)
    {
        if([alertViewOld.title isEqualToString:@"Erase your profile ?"])
        {
            showWipeView=0;
            
            [postsViewer setUserInteractionEnabled:TRUE];
            if(groupNumber!=NULL)
            {
                postBtn.enabled=TRUE;
            }
            friendsTab.enabled=TRUE;
            groupsTab.enabled=TRUE;
            
            [UIView animateWithDuration:0.4 animations:^{
                [wipeDataView setAlpha:0.0];
                [postsViewer setAlpha:1.0];
            }];
        }
        else if([alertViewOld.title isEqualToString:@"Login Password"])
        {
            showWipeView=0;
            
            [postsViewer setUserInteractionEnabled:TRUE];
            if(groupNumber!=NULL)
            {
                postBtn.enabled=TRUE;
            }
            friendsTab.enabled=TRUE;
            groupsTab.enabled=TRUE;
            
            [UIView animateWithDuration:0.4 animations:^{
                [wipeDataView setAlpha:0.0];
                [postsViewer setAlpha:1.0];
            }];
        }
    }
}


- (void)alertView:(UIAlertView *)alertViewOld clickedButtonAtIndex:(NSInteger)buttonIndex
{
    NSString *title = [alertViewOld buttonTitleAtIndex:buttonIndex];
    if([title isEqualToString:@"Show"])
    {
        NSLog(@"navigation stack init");
        UINavigationController *navController=(UINavigationController *)self.presentedViewController;
        
        userChatObj=[[userChatViewController alloc]initWithNibName:nil bundle:nil];
        [navController.visibleViewController.navigationController pushViewController:userChatObj animated:YES];
    }
}

/*This function is called when a user wipes his data successfully*/
-(void)resetAllVariables
{
    username=NULL;
    userNumber=NULL;
    groupName=NULL;
    groupNumber=NULL;
    accessToken=NULL;
    appearCheck=1;
    loginSuccessSignal=0;
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
}

@end